
package shapes;

import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;



public class Myframe2 extends javax.swing.JFrame implements Node {

    /**
     * Creates new form Myframe
     */
    private Colorize dialog;
    private CircleInfo circleInfo;
    private RectangleInfo rectangleInfo;
    private LineInfo lineInfo;
    private SquareInfo squareInfo;
    private TriangleInfo triangleInfo;
    private boolean inBorder;
    private AbstractShape temp;
    int index=1;
    public Myframe2() {
        initComponents();
        setTitle("Mini Paint");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        rectangleButton = new javax.swing.JButton();
        mydrawingArea = new shapes.Canvas();
        jPanel1 = new javax.swing.JPanel();
        lineSegmentButton = new javax.swing.JButton();
        colorizeButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        triangleButton = new javax.swing.JButton();
        copy = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        mydrawingArea.setBackground(new java.awt.Color(255, 255, 255));
        mydrawingArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mydrawingArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mouseDraggedOperation(evt);
            }
        });
        mydrawingArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mousePressedOperation(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Myframe2.this.mouseReleased(evt);
            }
        });
        mydrawingArea.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                mydrawingAreaComponentResized(evt);
            }
        });

        javax.swing.GroupLayout mydrawingAreaLayout = new javax.swing.GroupLayout(mydrawingArea);
        mydrawingArea.setLayout(mydrawingAreaLayout);
        mydrawingAreaLayout.setHorizontalGroup(
            mydrawingAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mydrawingAreaLayout.setVerticalGroup(
            mydrawingAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 89, Short.MAX_VALUE)
        );

        lineSegmentButton.setText("Line Segment");
        lineSegmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineSegmentButtonActionPerformed(evt);
            }
        });

        colorizeButton.setText("Colorize");
        colorizeButton.setToolTipText("");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        circleButton.setText("Oval");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Shape");

        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colorizeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton))
                            .addComponent(jLabel1)
                            .addComponent(copy, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(circleButton)
                        .addGap(41, 41, 41)
                        .addComponent(lineSegmentButton)
                        .addGap(52, 52, 52)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(rectangleButton)
                        .addGap(49, 49, 49)
                        .addComponent(triangleButton)
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addComponent(mydrawingArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(172, 172, 172))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorizeButton)
                            .addComponent(deleteButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rectangleButton)
                            .addComponent(squareButton)
                            .addComponent(lineSegmentButton)
                            .addComponent(circleButton)
                            .addComponent(triangleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mydrawingArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(copy)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        // TODO add your handling code here:
        try{
        setVisible(false);
        rectangleInfo=new RectangleInfo(mydrawingArea,jComboBox1);
        rectangleInfo.setParentNode(this);
        mydrawingArea.refresh(null);
        }catch(Exception e){}

    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void lineSegmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineSegmentButtonActionPerformed
       try{ 
       setVisible(false);
       lineInfo=new LineInfo(mydrawingArea,jComboBox1);
       lineInfo.setParentNode(this);
        mydrawingArea.refresh(null);
       }catch(Exception e)
       {}

// TODO add your handling code here:
    }//GEN-LAST:event_lineSegmentButtonActionPerformed

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
       
        try{
        Shape m = (Shape)Array.get(mydrawingArea.getShapes(),jComboBox1.getSelectedIndex());
         setVisible(false);
        dialog=new Colorize(m);
        dialog.setParentNode(this);
        mydrawingArea.refresh(null);
        }catch(Exception e)
        {
             JOptionPane.showMessageDialog(null,"No Shapes to Colorize");
        }
       
    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        // TODO add your handling code here:
       try{ 
        setVisible(false);
       circleInfo=new CircleInfo(mydrawingArea,jComboBox1);
       circleInfo.setParentNode(this);
        mydrawingArea.refresh(null);
       }catch(Exception e){}
    }//GEN-LAST:event_circleButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        // TODO add your handling code here:
        try{ 
       setVisible(false);
       squareInfo=new SquareInfo(mydrawingArea,jComboBox1);
       squareInfo.setParentNode(this);
        mydrawingArea.refresh(null);
        }catch(Exception e){}
       
    }//GEN-LAST:event_squareButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        try{
        Shape m = (Shape)Array.get(mydrawingArea.getShapes(),jComboBox1.getSelectedIndex());
        mydrawingArea.removeShape(m);
       mydrawingArea.refresh(null);
        jComboBox1.removeItemAt(jComboBox1.getSelectedIndex());
       // index--;
       
        }catch(Exception e){
            
             JOptionPane.showMessageDialog(null,"No Selected Shapes to Delete");
        
    }//GEN-LAST:event_deleteButtonActionPerformed
    }
    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed
        try{ 
        setVisible(false);
        triangleInfo=new TriangleInfo(mydrawingArea,jComboBox1);
        triangleInfo.setParentNode(this);
        mydrawingArea.refresh(null);
        }catch(Exception e){}
        
    }//GEN-LAST:event_triangleButtonActionPerformed

    private void mousePressedOperation(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mousePressedOperation

        Shape[]x=mydrawingArea.getShapes();
        int i;
        for( i=x.length-1;i>=0;i--)
        {((AbstractShape)x[i]).pressed=false;
            if(((AbstractShape)x[i]).contains(evt.getPoint()))
        {
            ((AbstractShape)x[i]).setBordersColor(Color.BLACK);
            jComboBox1.setSelectedIndex(i);
            ((AbstractShape)x[i]).setDraggingPoint(evt.getPoint());
            temp=(AbstractShape)x[i];
            mydrawingArea.refresh(null);
            temp.pressed=true;
            inBorder=false;
            break;
          
        }else if(((AbstractShape)x[i]).inBorders(evt.getPoint()))
        {
        ((AbstractShape)x[i]).setDraggingPoint(evt.getPoint());
        jComboBox1.setSelectedIndex(i);
            System.out.println("mmm"+temp.getClass());
        ((AbstractShape)x[i]).pressed=true;
        inBorder=true;
        break;
        
        }else{
            
         /*(AbstractShape)x[i])*/temp.setBordersColor(Color.WHITE);
         /*((AbstractShape)x[i])*/temp.pressed=false;
            
         jComboBox1.setSelectedIndex(-1);
         mydrawingArea.refresh(null); 
         inBorder=false;
        }
        
        }
//        for(int j=i-1;j>=0;j--)
//       {
//        ((AbstractShape)x[j]).pressed=false;
//        mydrawingArea.refresh(null); 
//        inBorder=false;  
//        }
    }//GEN-LAST:event_mousePressedOperation
    
    private void mouseDraggedOperation(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseDraggedOperation
        if(temp.pressed)
         {
           if(!inBorder){
           temp.moveTo(evt.getPoint());
           temp.setDraggingPoint(evt.getPoint());
           }
           else
           {
           //temp.setDraggingPoint(evt.getPoint());
           temp.resize(evt.getPoint());
           temp.setDraggingPoint(evt.getPoint());
           }
          
         }
         mydrawingArea.refresh(null);
        
    }//GEN-LAST:event_mouseDraggedOperation

    private void mouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseReleased

        if(temp.pressed)
        {
           //temp.moveTo(evt.getPoint());
        }
        
        
    }//GEN-LAST:event_mouseReleased

    private void mydrawingAreaComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mydrawingAreaComponentResized
//        Rectangle r=new Rectangle();
//        // TODO add your handling code here:
//       // mydrawingArea.getBounds().
//      r= mydrawingArea.getBounds();
       
    }//GEN-LAST:event_mydrawingAreaComponentResized

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        try{AbstractShape temp1= ( AbstractShape)Array.get(mydrawingArea.getShapes(),jComboBox1.getSelectedIndex());
        AbstractShape temp2= temp1.copy(temp1);
         mydrawingArea.addShape(temp2);
       String[] words =(jComboBox1.getSelectedItem().toString().split(" "));
         jComboBox1.addItem( words[0]+" "+ (jComboBox1.getItemCount()+1));
         //index++;
         mydrawingArea.refresh(null);
        }catch(Exception e){JOptionPane.showMessageDialog(null,"No Selected Shapes to Copy");}
        
    }//GEN-LAST:event_copyActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //LOAd
         mydrawingArea.clearpanel(); 
         jComboBox1.removeAllItems(); 
         index=1;
       JFileChooser fc = new JFileChooser();
       fc.setAcceptAllFileFilterUsed(false);
        FileFilter filter = new FileNameExtensionFilter("json file", "json");
        fc.setFileFilter(filter);
        fc.showOpenDialog(this);
        JSONParser parser=new  JSONParser();
         File fileToSave = fc.getSelectedFile();
         try( FileReader fr=new FileReader(fileToSave.getAbsolutePath()))
         {Object obj=parser.parse(fr);
         JSONArray shapes=(JSONArray)obj;
             System.out.println(shapes);
             for(int i=0;i<shapes.size();i++)
             {JSONObject shape=(JSONObject)shapes.get(i);
//                 System.out.println(shape);
               String typeofshape=(String)shape.get("Type");
                // System.out.println(typeofshape);
               
                 //make point1
                String x1 = (String) shape.get("X");
                   String y1 = (String) shape.get("Y");
                  Point p1=new Point(Integer.parseInt(x1),Integer.parseInt(y1)) ;
                  
              
 
                   String bordercolor=(String) shape.get("Border color");
                    String fillcolor=(String) shape.get("Fill color");
                    //fill
                     String[] parts2 = fillcolor.split(",");
                  String r2 = parts2[0].substring(parts2[0].lastIndexOf("=") + 1);
                  String g2=parts2[1].substring(parts2[1].lastIndexOf("=") + 1);
                  String b2=parts2[2].substring(parts2[1].lastIndexOf("=") + 1);
                 System.out.println(fillcolor);
                  
                 // System.out.println(bordercolor);
                  //border
                  
                  String[] parts1 = bordercolor.split(",");
                  String r1 = parts1[0].substring(parts1[0].lastIndexOf("=") + 1);
                  String g1=parts1[1].substring(parts1[1].lastIndexOf("=") + 1);
                  String b1=parts1[2].substring(parts1[1].lastIndexOf("=") + 1);
                  
        Color bcolor=new Color( Integer.parseInt(r1),Integer.parseInt(g1),Integer.parseInt(b1));
         Color fcolor=new Color( Integer.parseInt(r2),Integer.parseInt(g2),Integer.parseInt(b2));
          if(typeofshape.equals("Oval"))
          {Circle c=new Circle(p1,Integer.parseInt((String) shape.get("vertical radius")),Integer.parseInt((String) shape.get("Horizontal radius")));
          c.setColor(bcolor);
          c.setFillColor(fcolor);
           mydrawingArea.addShape(c);
           jComboBox1.addItem("Oval"+" " + index);
        index++;
       
        mydrawingArea.refresh(null);
          
          
          }
           if(typeofshape.equals("Line"))
           { String endx = (String) shape.get("Endpoint X");
                   String endy = (String) shape.get("Endpoint Y");
                  Point endp=new Point(Integer.parseInt(endx),Integer.parseInt(endy)) ;
               Line l=new Line(p1,endp);
               l.setColor(bcolor);
               l.setFillColor(fcolor);
                mydrawingArea.addShape(l);
                 jComboBox1.addItem("Line"+" " + index);
        index++;
               
           }
            if(typeofshape.equals("Recatngle"))
            {
                int width=Integer.parseInt((String) shape.get("Width"));
                int height=Integer.parseInt((String) shape.get("Height"));
               shapes.Rectangle r=new   shapes.Rectangle(p1,width,height);
                
               //  r=new shapes.Rectangle(new Point(x,y),w,h);
               //Rectangle r=new Rectangle(p1,width,height);
                r.setColor(bcolor);
          r.setFillColor(fcolor);
           mydrawingArea.addShape(r);
           jComboBox1.addItem("Rectangle"+" " + index);
        index++;
       
        mydrawingArea.refresh(null);
               
            }
            if(typeofshape.equals("Square"))
            {
             
                Square s=new Square(p1,Integer.parseInt((String) shape.get("Length")));

                s.setColor(bcolor);
          s.setFillColor(fcolor);
           mydrawingArea.addShape(s);
           jComboBox1.addItem("Square"+" " + index);
        index++;
       
        mydrawingArea.refresh(null);
               
            }
             if(typeofshape.equals("Triangle"))
            {
              String x2 = (String) shape.get("X2");
                   String y2 = (String) shape.get("Y2");
                  Point p2=new Point(Integer.parseInt(x2),Integer.parseInt(y2)) ;
             String x3 = (String) shape.get("X3");
                   String y3 = (String) shape.get("Y3");
                  Point p3=new Point(Integer.parseInt(x3),Integer.parseInt(y3)) ;
Triangle t=new Triangle(p1,p2,p3);
                t.setColor(bcolor);
          t.setFillColor(fcolor);
           mydrawingArea.addShape(t);
           jComboBox1.addItem("Triangle"+" " + index);
        index++;
       
        mydrawingArea.refresh(null);
               
            }
           
          
                
               
                 
             }
         
         
             
         } catch (FileNotFoundException ex) {
            Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
        }
//        
//        try{ JSONParser parser=new  JSONParser();
//        //JSONObject obj=new
//        JFileChooser fc = new JFileChooser();
//        
//        fc.setAcceptAllFileFilterUsed(false);
//         FileFilter filter = new FileNameExtensionFilter("json file", "json");
//        fc.setFileFilter(filter);
//        fc.showOpenDialog(this);
//        File f=fc.getSelectedFile();
//            FileReader fr=new FileReader(f);
//            JSONObject obj=( JSONObject) parser.parse(fr);
//            String type=(String)obj.get("Type");
//            System.out.println("type="+type);
//           // Object obj=parser.parse(fr);
//            // JSONArray shapes = (JSONArray) obj;
////             System.out.println(shapes);
////             for (int i = 0; i < shapes.size(); i++) {
////            JSONObject j = (JSONObject) shapes.get(i);
////            System.out.println(j.get("shapetype"));
//        } catch (FileNotFoundException ex) {
//            System.out.println("notfound");
//            //Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            System.out.println("io");
//            //Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ParseException ex) {
//            System.out.println("parse");
//            //Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
//        }
       
// System.out.println("load");
//        JFileChooser fileChooser = new JFileChooser();
//        fileChooser.setDialogTitle("Specify a file to load");
//        fileChooser.setAcceptAllFileFilterUsed(false);
//        FileFilter filter = new FileNameExtensionFilter("json file", new String[]{"json"});
//        fileChooser.setFileFilter(filter);
//        int userSelection = fileChooser.showOpenDialog(this);
//
//        if (userSelection == JFileChooser.APPROVE_OPTION) {
//            File fileToSave = fileChooser.getSelectedFile();
//            System.out.println("Save as file: " + fileToSave.getAbsolutePath());
//            try {
//                load(fileToSave.getAbsolutePath());
//            } catch (IOException ex) {
//                Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (ParseException ex) {
//                Logger.getLogger(Myframe2.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        //SAVE
         JSONArray arr=new  JSONArray();
       Shape[]x=mydrawingArea.getShapes();
       for(int i=0;i<x.length;i++)
        {arr.add(x[i].tojson());
        }
       JFileChooser fc=new JFileChooser() ;
       
       fc.setAcceptAllFileFilterUsed(false);
          FileFilter filter = new FileNameExtensionFilter("json file", "json");
        fc.setFileFilter(filter);
       fc.showSaveDialog(this);
       
     
       
        
        try{
            File f=fc.getSelectedFile();
            FileWriter fw=new  FileWriter(f);
            fw.write(arr.toJSONString());
            fw.flush();
           // toJSONString()
        }
       catch(Exception e)
       {System.out.println("error");
       
       }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    
    
    
    /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Myframe2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Myframe2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton circleButton;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JButton copy;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton lineSegmentButton;
    private shapes.Canvas mydrawingArea;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton triangleButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public Node getParentNode() {
    return this;    
    }

    @Override
    public void setParentNode(Node node) {
        
        }
}
